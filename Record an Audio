/****************************************************************************************************************/

/****************************************************************************************************************/


package com.iisc.spectrum.readaudiofile;



import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.app.Activity;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioTrack;
import android.media.MediaRecorder;
import android.media.audiofx.NoiseSuppressor;
import android.os.Bundle;
import android.os.Environment;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;

public class MainActivity extends Activity {
	Button mPlay, mRecord, mStop;
	byte[] audioByteData;
	byte[] audioData;
	boolean isRecording;
	boolean isReading;
	int sampleRate = 16000;
	AudioRecord record = null;
	AudioTrack track=null;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		 mRecord = (Button)findViewById(R.id.btnRecord);
		 mPlay = (Button)findViewById(R.id.btnPlay);
		 mStop = (Button) findViewById(R.id.btnStop);
		 
		 mRecord.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View arg0) {
					// TODO Auto-generated method stub
					Thread recordThread = new Thread(new Runnable() {
						
						@Override
						public void run() {
							// TODO Auto-generated method stub
							isRecording = true;
							Record();
						}
					});
					recordThread.start();
				}
			});
		 
		 mStop.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					stop_rec();
					
				}
			});
		 
		 mPlay.setOnClickListener(new View.OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					Play();
				}
			});
	}
	
	public void Record(){
    	
    	//record the audio from microphone and save it into storage
    	File recordFile = new File(Environment.getExternalStorageDirectory(), "Recorded_audio.pcm");
		try{
			recordFile.createNewFile();
			OutputStream outputStream = new FileOutputStream(recordFile);
			BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(outputStream);
			DataOutputStream dataOutputStream = new DataOutputStream(bufferedOutputStream);
			
			int minBufferSize = AudioRecord.getMinBufferSize(sampleRate, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);
			int freq = 1000;
			audioData = new byte[minBufferSize];
			record = new AudioRecord(MediaRecorder.AudioSource.MIC, sampleRate, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT, minBufferSize);
			record.startRecording();
			
			
			while(isRecording)
			{
				int numberOfShort = record.read(audioData, 0, minBufferSize);
				//mLowPassFilter = new LowPassFS(freq, sampleRate);
				for(int i=0; i<numberOfShort; i++){
					
					//dataOutputStream.writeDouble(audioData_double[i]);
					dataOutputStream.writeByte(audioData[i]);
				}
			}
			
			record.stop();
			dataOutputStream.close();
		}catch(IOException e){
			e.printStackTrace();
		}
    }
	
	public void stop_rec(){
    	isRecording = false;
    	isReading = false;
    }
	
	public void Play(){
		File recordFile = new File(Environment.getExternalStorageDirectory(), "Recorded_audio.pcm");
		 byte[] audioData = new byte[(int)recordFile.length()];
		 try{
				 InputStream inputStream = new FileInputStream(recordFile);
		         BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);
		         DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);
		
		        
		         
		         int i = 0;
		         while (dataInputStream.available() > 0)
		         {
		         	
		             audioData[i] = dataInputStream.readByte();
		             i++;
		         }
		         /*for(int i=0; i<bufferSizeInBytes; i++)
		         	audioData[i] = dataInputStream.readByte();*/
		
		         dataInputStream.close();
		 	
		 	
		         track = new AudioTrack(AudioManager.STREAM_MUSIC, sampleRate, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT,
		             audioData.length, AudioTrack.MODE_STREAM);
		
		         track.play();
		         track.write(audioData, 0, audioData.length);
			}
		 	catch(Exception e){
		 		e.printStackTrace();
		 	}
		
	}
	
}
